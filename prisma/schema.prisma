// npx prisma migrate dev --name ...
// npx prisma db seed

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OrderTableProduct {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  table               Table    @relation(fields: [tableId], references: [id])
  tableId             String   @db.Uuid
  product             Product  @relation(fields: [productId], references: [id])
  productId           String   @db.Uuid
  order               Order?   @relation(fields: [orderId], references: [id])
  orderId             String?  @db.Uuid
  orderDate           DateTime @default(now()) @db.Timestamptz(6)
  productPrice        Float
  managedByEmployee   User     @relation(fields: [managedByEmployeeId], references: [id])
  managedByEmployeeId String   @db.Uuid
}

model Order {
  id                  String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  paymentType         PaymentType         @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId       String              @db.Uuid
  tip                 Float
  totalPrice          Float
  totalPaid           Float
  createdDate         DateTime            @default(now()) @db.Timestamptz(6)
  deleted             DateTime?
  customer            User?               @relation("customer", fields: [customerId], references: [id])
  customerId          String?             @db.Uuid
  orderTableProduct   OrderTableProduct[]
  managedByEmployee   User                @relation("managedByEmployee", fields: [managedByEmployeeId], references: [id])
  managedByEmployeeId String              @db.Uuid
}

model PaymentType {
  id    String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name  String
  Order Order[]
}

model TableState {
  id      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name    String
  deleted DateTime?
  Table   Table[]
}

model TableArea {
  id      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name    String
  order   Int
  deleted DateTime?
  Table   Table[]
}

model Table {
  id                String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String
  order             Int
  qrKey             String
  tableState        TableState          @relation(fields: [tableStateId], references: [id])
  tableStateId      String              @db.Uuid
  tableArea         TableArea           @relation(fields: [tableAreaId], references: [id])
  tableAreaId       String              @db.Uuid
  deleted           DateTime?
  OrderTableProduct OrderTableProduct[]
}

model ProductState {
  id       String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String
  deleted  DateTime?
  products Product[]
}

model Role {
  id      String    @id(map: "PK_9309532197a7397548e341e5536") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name    String    @db.VarChar
  deleted DateTime?
  user    User[]
}

model User {
  id                     String              @id(map: "PK_9862f679340fb2388436a5ab3e4") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firstName              String              @db.VarChar
  lastName               String              @db.VarChar
  email                  String              @unique @db.VarChar
  password               String              @db.VarChar
  roleId                 String              @db.Uuid
  deleted                DateTime?
  role                   Role                @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_0b8c60cc29663fa5b9fb108edd7")
  OrderTableProduct      OrderTableProduct[]
  customerOrder          Order[]             @relation("customer")
  managedByEmployeeOrder Order[]             @relation("managedByEmployee")
}

model Log {
  id              String    @id(map: "PK_db6e55781ba6e3d4fd6485cca24") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  entityId        String    @db.Uuid
  model           String
  logType         String?
  createdByUserId String?   @db.Uuid
  createdDate     DateTime  @default(now()) @db.Timestamptz(6)
  deleted         DateTime?

  entityObject Json

  @@map("Log")
}

model ProductCategory {
  deleted  DateTime?
  id       String               @id(map: "PK_e92698845b7004ef04fe046816f") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name     String               @db.VarChar
  order    Int
  typeId   String?              @db.Uuid
  type     ProductCategoryType? @relation(fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_3396a6ae1dbd72159a63978fccf")
  products Product[]
}

model ProductCategoryType {
  deleted           DateTime?
  id                String            @id(map: "PK_d2efbbbac2d3f39560f7cf497da") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String            @db.VarChar
  productCategories ProductCategory[]
}

model Product {
  deleted           DateTime?
  id                String              @id(map: "PK_6e8f75045ddcd1c389c765c896e") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String              @db.VarChar
  description       String              @db.VarChar
  imgUrl            String              @db.VarChar
  order             Int
  price             Float
  categoryId        String?             @db.Uuid
  category          ProductCategory?    @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_641188cadea80dfe98d4c769ebf")
  productState      ProductState        @relation(fields: [productStateId], references: [id])
  productStateId    String              @db.Uuid
  OrderTableProduct OrderTableProduct[]
}
